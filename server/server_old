# # server.py
# '''
# source ~/.venvs/langchain/.venv_langchain/bin/activate
# uvicorn server:app --reload --port 4580
# '''

# from fastapi import FastAPI, WebSocket, WebSocketDisconnect
# from fastapi.middleware.cors import CORSMiddleware
# from chat.graph import init_graph
# from chat.modes import modes
# from langchain_core.messages import HumanMessage
# from langchain_core.runnables.config import RunnableConfig

# app = FastAPI()

# # Allow all origins for development (customize in prod!)
# app.add_middleware(
#     CORSMiddleware,
#     allow_origins=["*"],
#     allow_methods=["*"],
#     allow_headers=["*"],
# )

# @app.websocket("/ws/chat")
# async def chat_websocket(websocket: WebSocket):
#     await websocket.accept()

#     thread_id = "websocket-client"
#     graph = init_graph(thread_id)
#     config: RunnableConfig = {"configurable": {"thread_id": thread_id}}

#     # Set initial persona (mode)
#     default_mode: str = modes["default"] or "default"
#     graph.invoke({"messages": [HumanMessage(content=default_mode)]}, config)

#     try:
#         while True:
#             user_input = await websocket.receive_text()

#             # Optional: switch personality mode via special message
#             if user_input.startswith("/mode "):
#                 mode_key = user_input.removeprefix("/mode ").strip()
#                 mode_prompt = modes.get(mode_key)
#                 if not mode_prompt:
#                     await websocket.send_text(f"[Mode Error] Unknown mode: '{mode_key}'")
#                     continue
#                 graph.invoke({"messages": [HumanMessage(content=mode_prompt)]}, config)
#                 await websocket.send_text(f"[Mode changed to: {mode_key}]")
#                 continue

#             # Stream response from LangGraph
#             async for chunk in graph.astream(
#                 {"messages": [HumanMessage(content=user_input)]},
#                 config,
#                 stream_mode="messages"
#             ):
#                 msg = getattr(chunk[0], "content", "")
#                 if msg:
#                     await websocket.send_text(msg)

#             await websocket.send_text("[[END]]")  # end of one response

#     except WebSocketDisconnect:
#         print("WebSocket closed by client")


